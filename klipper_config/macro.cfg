#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X322 Y600 Z30 F3600
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    M82                             ; This command is used to override G91 and put the E axis into absolute mode independent of the other axes.
    G90                             ; Absolute Positioning
    BED_MESH_CLEAR
    G28                             ; First Home All Axes
    M117 Heating BED and Extruder
    M104 S{params.EXTRUDER}          ; Set The Nozzle Temp
    M190 S{params.HEATER_BED}       ; Wait Fot The Bed Temp

    # M117 Cleaning Nozzle
    # clean_nozzle                    ; First Time Clean The Nozzle

    M117 QGL
    QUAD_GANTRY_LEVEL               ; QGL

    M117 Resetting Z
    G28 Z                           ; Homing Z
    CALIBRATE_Z                     ; Z-offset calibration

    M117 Bed Mesh Calibrate
    BED_MESH_CALIBRATE

    G1 X50 Y350 Z25 F3600           ; Move The Nozzle To The Heating Position
    M109 S{params.EXTRUDER}         ; Wait For The Nozzle Temp
    # M117 Cleaning Nozzle
    # clean_nozzle                    ; Second Time Clean The Nozzle

    M117 Purge Line
    G1 X10 Y10 Z3 F3600 ; go outside print area
    G92 E0.0
    G1 X60.0 E9.0 F1000.0 ; intro line
    G1 X100.0 E12.5 F1000.0 ; intro line
    G92 E0.0

    M117 Printing... 

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y0 F3600      ; park nozzle at front
    M107                                     ; turn off fan
    M84                                      ; turn off motors

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    M117 DONE!

## [gcode_macro LIGHTS]
## variable_state: 'off'
## gcode:
##    {% if printer['gcode_macro LIGHTS'].state == 'off' %}
##      SET_GCODE_VARIABLE MACRO=LIGHTS VARIABLE=state VALUE="'on'"
##      SET_LED LED=caselight RED=1 GREEN=1 BLUE=1
##    {% else %}
##      SET_GCODE_VARIABLE MACRO=LIGHTS VARIABLE=state VALUE="'off'"
##      SET_LED LED=caselight RED=0 GREEN=0 BLUE=0
##    {% endif %}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(230) %}      #edit to your park position
    {% set y = params.Y|default(230) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                           ; set extruder to relative
   G1 E30 F1800                  ; quickly load filament to down bowden
   G1 E20 F300                   ; slower extrusion for hotend path
   G1 E10 F150                   ; prime nozzle with filament
   M82                           ; set extruder to absolute

[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                           ; set extruder to relative
   G1 E10 F300                   ; extrude a little to soften tip
   G1 E-65 F1800                 ; retract filament completely
   M82                           ; set extruder to absolute